@charset "UTF-8";

/*************
    Mixins
**************/
/********************
    Fixes/Resets
*********************/
.clean-list-style {
    list-style: none;
    margin: 0;
    padding: 0;

    li {
        margin: 0;
        padding: 0;
        background: none;
        line-height: 120%;
    }
}

.clean-list() {
    &:extend(.clean-list-style all);

}

.smooth-style {
    -webkit-font-smoothing: antialiased;
}

.smooth() {
    &:extend(.smooth-style);
}

/*****************
      Forms
******************/
.placeholder(@arguments) {

    &::-webkit-input-placeholder {
        @arguments();
    }
    &:-moz-placeholder {
        @arguments();
    }
    &::-moz-placeholder {
        @arguments();
    }
    &:-ms-input-placeholder {
        @arguments();
    }
}

/****************
     Fonts
*****************/
.font-mixin(@font-family-fallbacks,@weight,@style) {
    font-family: @font-family-fallbacks;
    font-weight: @weight;
    font-style: @style;
}

/******************
     Effects
*******************/
.hardwareAccel() {
    .prefixed(transform, perspective(1px) translateZ(0));
}

.improveAntiAlias() {
    box-shadow: 0 0 1px rgba(0, 0, 0, 0);
}

.forceBlockLevel() {
    display: inline-block;
    vertical-align: middle;
}

.hacks() {
    .forceBlockLevel();
    .hardwareAccel();
    .improveAntiAlias();
}

.prefixed(@property, @value) {
    & when (@webkit = true) {
        -webkit-@{property}: @value;
    }

    & when (@moz = true) {
        -moz-@{property}: @value;
    }

    & when (@ms = true) {
        -ms-@{property}: @value;
    }

    & when (@o = true) {
        -o-@{property}: @value;
    }

        @{property}: @value;
}

// Browser Prefixes - Which CSS prefixes should be used?
@webkit: true;
@moz: true;
@ms: true;
@o: false;

// Compile with or without classes
@includeClasses: true;

.underline-from-center(@color, @height) {
    @duration: .2s;;

    .hacks();
    position: relative;
    overflow: hidden;

    &:before {
        content: "";
        position: absolute;
        z-index: -1;
        left: 50%;
        right: 50%;
        bottom: 0;
        background: @color;
        height: @height;
        .prefixed(transition-property, "left, right");
        .prefixed(transition-duration, @duration);
        .prefixed(transition-timing-function, ease-out);
    }

    &:hover,
    &:focus,
    &:active {

        &:before {
            left: 0;
            right: 0;
        }
    }
}

/******************
       For
*****************/
.for(@i, @n) {
    .-each(@i)
}

.for(@n) when (isnumber(@n)) {
    .for(1, @n)
}

.for(@i, @n) when not (@i = @n) {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}

.for(@array) when (default()) {
    .for-impl_(length(@array))
}

.for-impl_(@i) when (@i > 1) {
    .for-impl_((@i - 1))
}

.for-impl_(@i) when (@i > 0) {
    .-each(extract(@array, @i))
}